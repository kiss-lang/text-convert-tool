(var &mut :VSCodeAPI _vscode)
(var &mut :Window window)
(var &mut :Document document)
(var &mut :Element content)
(var &mut :Array<Block> tctBlocks)
(var &mut :Void->Void doOnSuccess null)
(defMacro onSuccess [&body body]
    `{
        (when doOnSuccess
            (postMessage (Error "still waiting for success of previous edit request!"))
            (return))
        (set doOnSuccess ->:Void {,@body})
    })

(function postMessage [:Message message]
    (_vscode.postMessage (Json.stringify message)))

(function _main []
    (set window EditorExterns.window)
    (set document window.document)
    (set content (document.createElement "div"))
    (document.body.appendChild content)

    (localFunction createElement [:String tag :String html]
        (let [e (document.createElement tag)]
            (set e.innerHTML html)
            e))

    (localFunction initialize [:Array<Block> _blocks]
        (set tctBlocks _blocks)
        (let [pre (createElement "pre" "")
                table (createElement "table" "")
                headingRow (createElement "tr" "")
                headings (for heading ["" "" "input text" "" "output text" "locked" "" ""] (createElement "th" heading))]
            (doFor heading headings (headingRow.appendChild heading))
            (table.appendChild headingRow)
            (doFor block tctBlocks
                (let [tr (createElement "tr" "")
                        [tdDelete tdInsertAbove tdIn tdConvert tdOut tdLocked tdJoin tdInsertBelow] (for i (range 8) (createElement "td" ""))
                        tdDeleteLink (createElement "a" "x")
                        tdLockedCheckBox (createElement "input" "")
                        codeIn (createElement "code" block.inText)
                        codeOut (createElement "code" block.outText)]
                    
                    // Delete block:
                    (tdDelete.appendChild tdDeleteLink)
                    (tdDeleteLink.addEventListener "click"
                        ->(let [idx (tctBlocks.indexOf block)]
                            (onSuccess
                                (tctBlocks.splice idx 1)
                                (table.removeChild tr))
                            (postMessage (RequestDelete idx))))

                    // Lock/unlock block:
                    (tdLocked.appendChild tdLockedCheckBox)
                    (tdLockedCheckBox.setAttribute "type" "checkbox")
                    (when block.locked
                        (tdLockedCheckBox.setAttribute "checked" "true"))
                    (tdLockedCheckBox.addEventListener "change"
                        ->(let [idx (tctBlocks.indexOf block)]
                            (onSuccess
                                (set block.locked !block.locked))
                            (postMessage (RequestToggleLock idx))))

                    (set tdInsertAbove.innerHTML "+")
                    (set tdInsertBelow.innerHTML "+")
                    (set tdConvert.innerHTML "->")
                    (set tdJoin.innerHTML "join â†“")
                    
                    (tdIn.appendChild codeIn)
                    (tdOut.appendChild codeOut)
                    (doFor td [tdDelete tdInsertAbove tdIn tdConvert tdOut tdLocked tdJoin tdInsertBelow]
                        (tr.appendChild td))
                    (table.appendChild tr)))
            (pre.appendChild table)
            (content.appendChild pre)))

    (window.addEventListener "message"
        ->:Void event
            (let [:Message message (Json.parse event.data)]
                (case message
                    ((Initialize blocks)
                        (initialize blocks))
                    (RequestSuccess
                        (doOnSuccess)
                        (set doOnSuccess null))
                    (RequestFailure
                        (set doOnSuccess null))
                    (otherwise null))))

    (set Prelude.makeAwaitLetDefaultCatch
        ->binding
            ->reason
                (postMessage (Error "awaitLet $binding failed: $reason")))

    (set _vscode (EditorExterns.acquireVsCodeApi))
    (set Prelude.printStr ->[message]
        (postMessage (Print message)))
    (print "Hello editor/provider interface!"))