(var &mut :VSCodeAPI _vscode)
(var &mut :Window window)
(var &mut :Document document)
(var &mut :Element content)
(var &mut :Array<Block> tctBlocks)
(var &mut :String->Void doOnSuccess null)
(defMacro onSuccess [&body body]
    `{
        (when doOnSuccess
            (postMessage (Error "still waiting for success of previous edit request!"))
            (return))
        (set doOnSuccess ->:Void _ {,@body})
    })
(defMacro onConvert [argList &body body]
    `{
        (when doOnSuccess
            (postMessage (Error "still waiting for success of previous edit request!"))
            (return))
        (set doOnSuccess (lambda ,argList ,@body))
    })

(function htmlEscape [:String code]
    (.replace
        (.replace
            (code.replace "<" "&lt;")
            ">"
            "&gt;")
        "\n"
        "<br />"))

(function postMessage [:Message message]
    (_vscode.postMessage (Json.stringify message)))

(function _main []
    (set window EditorExterns.window)
    (set document window.document)
    (set content (document.createElement "div"))
    (document.body.appendChild content)

    (localFunction createElement [:String tag :String html]
        (let [e (document.createElement tag)]
            (set e.innerHTML html)
            e))

    (localFunction monacoEditor [td :Block block :Bool outText &opt style language]
        (unless (or block.locked (= "DIV" .tagName (td.children.item 0)))
            (let [div (createElement "div" "")
                    :Dynamic e
                        (Lib.global.monaco.editor.create div
                            (objectWith
                                [
                                    value (if outText block.outText block.inText)
                                    lineNumbers "on"
                                    scrollBeyondLastLine false
                                    theme "vs-dark"
                                    minimap (object enabled false)
                                    wordWrap true
                                ]
                                language))
                    updateSize
                        ->[&opt _] {
                            (div.setAttribute "style" "$?{style} height: $(e.getContentHeight)px;")
                            (e.layout)
                        }
                    :Element codeElement
                        (cast (td.removeChild td.firstChild))]
                (updateSize)
                (td.appendChild div)
                (e.onDidBlurEditorText
                    ->_ {
                        (onSuccess
                            (if outText
                                    (set block.outText (e.getValue))
                                (set block.inText (e.getValue)))
                            (set td.innerHTML "")
                            (set codeElement.innerHTML (htmlEscape (e.getValue)))
                            (td.appendChild codeElement))
                        (postMessage (RequestEdit (tctBlocks.indexOf block) outText (e.getValue)))
                    })
                (e.onDidContentSizeChange updateSize)
                (e.focus)
                e)))

    (localFunction initialize [:Array<Block> _blocks]
        (set tctBlocks _blocks)
        (set content.innerHTML "")
        (localFunction rowForBlock [:Element table :Block block]
            (let [tr (createElement "tr" "")
                    [tdDelete tdInsertAbove tdIn tdConvert tdOut tdLocked tdJoin tdInsertBelow] (for i (range 8) (createElement "td" ""))
                    tdDeleteLink (createElement "a" "x")
                    tdJoinLink (createElement "a" "join â†“")
                    tdLockedCheckBox (createElement "input" "")
                    tdConvertLink (createElement "a" "->")
                    codeIn (createElement "code" (htmlEscape block.inText))
                    codeOut (createElement "code" (htmlEscape block.outText))]
                    
                // Delete block:
                (tdDelete.appendChild tdDeleteLink)
                (tdDeleteLink.addEventListener "click"
                    ->(let [idx (tctBlocks.indexOf block)]
                        (onSuccess
                            (tctBlocks.splice idx 1)
                            (table.removeChild tr))
                        (postMessage (RequestDelete idx))))

                // Lock/unlock block:
                (tdLocked.appendChild tdLockedCheckBox)
                (tdLockedCheckBox.setAttribute "type" "checkbox")
                (when block.locked
                    (tdLockedCheckBox.setAttribute "checked" "true"))
                (tdLockedCheckBox.addEventListener "change"
                    ->(let [idx (tctBlocks.indexOf block)]
                        (onSuccess
                            (set block.locked !block.locked))
                        (postMessage (RequestToggleLock idx))))

                // Insert block links:
                (localFunction makeInsertLink [td idxOffset]
                    (let [link (createElement "a" "+")]
                        (td.appendChild link)
                        (link.addEventListener "click"
                            ->(let [idx (+ (tctBlocks.indexOf block) idxOffset)]
                                (onSuccess
                                    // NOTE This block object has a blank id because we shouldn't
                                    // need to reference ids in the editor context:
                                    (let [newBlock
                                                (object id "" inText "" outText "" locked false)]
                                        (tctBlocks.insert idx newBlock)
                                        (table.insertBefore (rowForBlock table newBlock) (nth table.childNodes (+ idx 1)))))
                                (postMessage (RequestInsert idx))))))
                (makeInsertLink tdInsertAbove 0)
                (makeInsertLink tdInsertBelow 1)

                // Convert link
                (tdConvert.appendChild tdConvertLink)
                (tdConvertLink.addEventListener "click"
                    ->(unless block.locked
                        (let [idx (tctBlocks.indexOf block)]
                            (onConvert [text]
                                (set codeOut.innerHTML (htmlEscape text)))
                            (postMessage (RequestConvert idx)))))
                
                // JoinDown link
                (tdJoin.appendChild tdJoinLink)
                (tdJoinLink.addEventListener "click"
                    ->(let [idx (tctBlocks.indexOf block)]
                        (onSuccess
                            (postMessage RequestFullUpdate))
                        (postMessage (RequestJoinDown idx))))
                
                // In/out blocks open Monaco editor when clicked:
                (tdIn.addEventListener "click"
                    ->(monacoEditor tdIn block false))
                (tdIn.appendChild codeIn)
                (var CONTENT_COLUMN_STYLE "width: 80ch;")
                (var CONTENT_CODE_STYLE  "display: inline-block; overflow-wrap: break-word; white-space: normal;")
                (tdIn.setAttribute "style" CONTENT_COLUMN_STYLE)
                (codeIn.setAttribute "style" CONTENT_CODE_STYLE)

                (tdOut.addEventListener "click"
                    ->(monacoEditor tdOut block true))
                (tdOut.appendChild codeOut)
                (tdOut.setAttribute "style" CONTENT_COLUMN_STYLE)
                (codeOut.setAttribute "style" CONTENT_CODE_STYLE)

                (doFor td [tdDelete tdInsertAbove tdIn tdConvert tdOut tdLocked tdJoin tdInsertBelow]
                    (tr.appendChild td))
                tr))

        (let [pre (createElement "pre" "")
                table (createElement "table" "")
                headingRow (createElement "tr" "")
                headings (for heading ["" "" "input text" "" "output text" "locked" "" ""] (createElement "th" heading))]
            (doFor heading headings (headingRow.appendChild heading))
            (table.appendChild headingRow)
            (doFor block tctBlocks
                (table.appendChild (rowForBlock table block)))
            (pre.appendChild table)
            (content.appendChild pre)))

    

    (window.addEventListener "message"
        ->:Void event
            (let [:Message message (Json.parse event.data)]
                (case message
                    ((Initialize blocks)
                        (initialize blocks))
                    (RequestSuccess
                        (doOnSuccess "")
                        (set doOnSuccess null))
                    (RequestFailure
                        (set doOnSuccess null))
                    ((BlockConverted idx text)
                        (set .outText (nth tctBlocks idx) text)
                        (doOnSuccess text)
                        (set doOnSuccess null))
                    (otherwise null))))

    // Keyboard shortcuts:
    (window.addEventListener "keydown" ->:Void e
        (if e.ctrlKey
                (case e.key
                    // Undo/redo shortcuts:
                    ("z"
                        (onSuccess
                            (postMessage RequestFullUpdate))
                        (postMessage RequestUndo))
                    ("y" 
                        (onSuccess
                            (postMessage RequestFullUpdate))
                        (postMessage RequestRedo))
                    (otherwise))
            (case e.key
                (otherwise))))

    (set Prelude.makeAwaitLetDefaultCatch
        ->binding
            ->reason
                (postMessage (Error "awaitLet $binding failed: $reason")))

    (set _vscode (EditorExterns.acquireVsCodeApi))
    (set Prelude.printStr ->[message]
        (postMessage (Print message))))