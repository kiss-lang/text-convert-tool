(var &mut :VSCodeAPI _vscode)
(var &mut :Window window)
(var &mut :Document document)
(var &mut :Element content)
(var &mut :Array<Block> tctBlocks)

(function postMessage [:Message message]
    (_vscode.postMessage (Json.stringify message)))

(function _main []
    (set window EditorExterns.window)
    (set document window.document)
    (set content (document.createElement "div"))
    (document.body.appendChild content)

    (localFunction createElement [:String tag :String html]
        (let [e (document.createElement tag)]
            (set e.innerHTML html)
            e))

    (localFunction initialize [:Array<Block> blocks]
        (set tctBlocks blocks)
        (let [pre (createElement "pre" "")
                table (createElement "table" "")]
            (doFor block blocks
                (let [tr (createElement "tr" "")
                        tdIn (createElement "td" "")
                        tdOut (createElement "td" "")
                        codeIn (createElement "code" block.inText)
                        codeOut (createElement "code" block.outText)]
                    (tdIn.appendChild codeIn)
                    (tdOut.appendChild codeOut)
                    (tr.appendChild tdIn)
                    (tr.appendChild tdOut)
                    (table.appendChild tr)))
            (pre.appendChild table)
            (content.appendChild pre)))

    (window.addEventListener "message"
        ->:Void event
            (let [:Message message (Json.parse event.data)]
                (case message
                    ((Initialize blocks)
                        (initialize blocks))
                    (otherwise null))))

    (set _vscode (EditorExterns.acquireVsCodeApi))
    (set Prelude.printStr ->[message]
        (postMessage (Print message)))
    (print "Hello editor/provider interface!"))