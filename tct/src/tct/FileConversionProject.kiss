(defNew &private 
    [
        &prop :String directory
        &prop :String inExtension
        &prop :String outExtension
        &prop :String outBlockTerminator
        &prop :Array<Block> blocks
    ]
    [
        :String inFile "${directory}/$(.withoutExtension (directory.withoutDirectory)).${inExtension}"
        :String outFile "${directory}/$(.withoutExtension (directory.withoutDirectory)).${outExtension}"
        :String blockDir "${directory}/blocks"
        :String tctFile "${directory}/tct.txt"
    ])

(function :FileConversionProject loadDirectory [directory]
    (let [tctFile "${directory}/tct.txt"
            stream (Stream.fromFile tctFile)
            [inExtension outExtension outBlockTerminator]
                (for thing ["inExtension" "outExtension" "outBlockTerminator"]
                    (stream.expect thing ->(stream.takeUntilAndDrop "|||")))
            blockLines
                {
                    (stream.dropWhitespace)
                    (filter (stream.content.split "\n"))
                }]
        
        (new FileConversionProject directory inExtension outExtension outBlockTerminator
            (for blockLine blockLines
                (let [[id lockedStr] (blockLine.split " ")]
                    (object
                        id id
                        locked (= lockedStr "true")
                        inText (File.getContent "${directory}/blocks/${id}.${inExtension}")
                        outText (File.getContent "${directory}/blocks/${id}.${outExtension}")))))))

(function importFile [:String inFile :String outExtension :String inBlockDelimiter :String outBlockTerminator]
    (let [inExtension (inFile.extension)
            content (File.getContent inFile)
            inBlockContent (content.split inBlockDelimiter)]
        (.fullSave
            (new FileConversionProject
                "$(inFile.withoutExtension).tct"
                inExtension
                outExtension
                outBlockTerminator
                (for [idx section] (enumerate inBlockContent)
                    (when (= idx (- inBlockContent.length 1))
                        (set inBlockDelimiter ""))
                    (object 
                        id (Uuid.v4)
                        inText "${section}${inBlockDelimiter}"
                        outText ""
                        locked false))))))

(method :Void _saveTctFile []
    (let [&mut tctContent ""]
        (+= tctContent "${inExtension}|||${outExtension}|||${outBlockTerminator}|||\n")
        (doFor block blocks
            (+= tctContent "${block.id} ${block.locked}\n")
            (File.saveContent tctFile tctContent))))

(method :Void _saveBlock [:Block block]
    (File.saveContent "${blockDir}/${block.id}.${inExtension}" block.inText)
    (File.saveContent "${blockDir}/${block.id}.${outExtension}" block.outText))

(method :Void _deleteBlock [:Block block]
    (FileSystem.deleteFile "${blockDir}/${block.id}.${inExtension}")
    (FileSystem.deleteFile "${blockDir}/${block.id}.${outExtension}"))

(method :FileConversionProject fullSave []
    (unless (and (FileSystem.exists directory) (FileSystem.isDirectory directory))
        (FileSystem.createDirectory directory))

    (unless (and (FileSystem.exists blockDir) (FileSystem.isDirectory blockDir))
        (FileSystem.createDirectory blockDir))

    (_saveTctFile)

    (doFor block blocks
        (_saveBlock block))

    (File.saveContent inFile
        (.join (for block blocks block.inText) ""))

    (File.saveContent outFile
        (.join (for block blocks block.outText) ""))

    this)

(prop :Array<ChangeRecord> changeHistory [])
(prop &mut :Array<ChangeRecord> undoHistory [])

(method :Bool undoChange []
    (whenLet [lastChange (changeHistory.pop)
                reverseChange (_invertChange lastChange)]
        (_applyChange reverseChange)
        (changeHistory.pop)
        (undoHistory.push reverseChange)
        (return true))
    false)

(method :Bool redoChange []
    (whenLet [lastUndo (undoHistory.pop)
                redo (_invertChange lastUndo)]
        (_applyChange redo)
        (return true))
    false)

(method :Bool _applyChange [:ChangeRecord change]
    (case change
        ((objectWith [type Insert] blockIndex newBlock)
            (blocks.insert blockIndex newBlock)
            (_saveTctFile)
            (_saveBlock newBlock))
        ((objectWith [type Delete] blockIndex oldBlock)
            (when .locked (nth blocks blockIndex) (return false))
            (blocks.splice blockIndex 1)
            (_saveTctFile)
            (_deleteBlock oldBlock))
        ((objectWith [type Edit] blockIndex oldBlock newBlock)
            (when (and oldBlock.locked newBlock.locked)
                (return false))
            (setNth blocks blockIndex newBlock)
            (_saveTctFile)
            (_saveBlock newBlock))
        (never otherwise))
    (changeHistory.push change)
    true)

(method :ChangeRecord _invertChange [:ChangeRecord change]
    (case change
        ((objectWith [type Insert] blockIndex newBlock)
            (objectWith [type Delete oldBlock newBlock] blockIndex))
        ((objectWith [type Delete] blockIndex oldBlock)
            (objectWith [type Insert newBlock oldBlock] blockIndex))
        ((objectWith [type Edit] blockIndex oldBlock newBlock)
            (objectWith [type Edit oldBlock newBlock newBlock oldBlock] blockIndex))
        (never otherwise)))

(method insertBlock [index &opt :String inText :String outText :Bool locked]
    (_applyChange (object
                    type Insert
                    blockIndex index
                    newBlock (object
                                id (Uuid.v4)
                                inText (or inText "")
                                outText (or outText "")
                                locked ?locked))))

(method deleteBlock [index]
    (_applyChange (object
                    type Delete
                    blockIndex index
                    oldBlock (nth blocks index))))

(method editBlock [index &opt :String newInText :String newOutText :Bool newLocked]
    (let [oldBlock (nth blocks index)]
        (when (isNull newInText) (set newInText oldBlock.inText))
        (when (isNull newOutText) (set newOutText oldBlock.outText))
        (when (isNull newLocked) (set newLocked oldBlock.locked))
        (_applyChange (object
                        type Edit
                        blockIndex index
                        oldBlock oldBlock
                        newBlock (object
                                    id oldBlock.id
                                    inText newInText
                                    outText newOutText
                                    locked newLocked)))))

(method isLocked [index]
    .locked (nth blocks index))

(method toggleLock [index]
    (let [locked .locked (nth blocks index)]
        (editBlock index null null !locked)))