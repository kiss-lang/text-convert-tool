// TCT Conversions for Fountain files -> Hollywoo scripts

(function isUpperCase [s]
    (= s (s.toUpperCase)))

(var :Array<String> specialSpeechTags [])

(function specialSpeech [name parenTag hmethod]
    (specialSpeechTags.push parenTag)
    (FileConversionProject.registerConversion
        (new tct.StreamConversion name "fountain" "hollywoo"
            ->stream
                ?(whenLet [(Some name) (stream.takeUntilAndDrop " (${parenTag}")]
                    (doFor tag scriptTags (when (name.startsWith tag) (return false)))
                    (and (isUpperCase name) {(stream.dropWhitespace) !(stream.isEmpty)}))
            ->stream
                (let [name (whenLet [(Some name) (stream.takeUntilAndDrop " (${parenTag}")] name)
                        &mut output ""]
                    (stream.takeLine)
                    (loop
                        (let [wryly (ifLet [(Some w) (stream.takeBetween "(" ")\n")] w "")
                                line (ifLet [(Some l) (stream.takeLine)] (l.trim) (break))]
                            (when line
                                (+= output "$hmethod \"${name}\" \"${wryly}\" ##\"${line}\"##\n")
                                (+= output "// WATCHMODEDELAY ##\"Delay after ${line}\"##\n")
                                )))
                    output))))

(specialSpeech "On Phone Speech" "O.P." "ONPHONESPEECH")
(specialSpeech "VoiceOver Speech" "V.O." "VOICEOVER")
(specialSpeech "Off-Screen Speech" "O.S." "OFFSCREENSPEECH")

(var scriptTags ["INSERT"])

(FileConversionProject.registerConversion
    (new tct.StreamConversion "Normal Speech" "fountain" "hollywoo"
        ->stream ?(whenLet [(Some name) (stream.takeLine)]
                        (doFor tag scriptTags (when (name.startsWith tag) (return false)))
                        (doFor tag specialSpeechTags
                            (whenLet [(Some _) (indexOf name "(${tag}")] (return false)))
                        (and (isUpperCase name) {(stream.dropWhitespace) !(stream.isEmpty)}))
        ->stream
            (let [name (whenLet [(Some name) (stream.takeLine)] (.trim (name.replace "(CONT'D)" "")))
                    &mut output []]
                (loop
                    (let [wryly (ifLet [(Some w) (stream.takeBetween "(" ")\n")] w "")
                            line (ifLet [(Some l) (stream.takeLine)] (l.trim) (break))]
                        (when line
                            (output.push "NORMALSPEECH \"${name}\" \"${wryly}\" ##\"${line}\"##")
                            (output.push "// WATCHMODEDELAY ##\"Delay after ${line}\"##"))))
                (output.push "")
                (output.join "\n"))))

(FileConversionProject.registerConversion
    (new tct.StreamConversion "Custom Speech" "fountain" "hollywoo"
        ->stream ?(whenLet [(Some name) (stream.takeLine)]
                        (doFor tag scriptTags (when (name.startsWith tag) (return false)))
                        (doFor tag specialSpeechTags
                            (whenLet [(Some _) (indexOf name "(${tag}")] (return false)))
                        (let [name (.trim (name.replace "(CONT'D)" ""))
                                hasParen (name.contains "(")
                                name (.trim (name.substr 0 (name.indexOf "(")))]
                            (and (isUpperCase name) {(stream.dropWhitespace) !(stream.isEmpty)} hasParen)))

        ->stream
            (let [nameAndParenTag (whenLet [(Some name) (stream.takeLine)] (.trim (name.replace "(CONT'D)" "")))
                    nameAndParenTagStream (kiss.Stream.fromString nameAndParenTag)
                    name (.trim (nameAndParenTagStream.expect "name" ->(nameAndParenTagStream.takeUntilAndDrop "(")))
                    parenTag (nameAndParenTagStream.expect "custom dialog type" ->(nameAndParenTagStream.takeUntilAndDrop ")"))
                    &mut output []]
                (loop
                    (let [wryly (ifLet [(Some w) (stream.takeBetween "(" ")\n")] w "")
                            line (ifLet [(Some l) (stream.takeLine)] (l.trim) (break))]
                        (when line
                            (output.push "// CUSTOMSPEECH \"${parenTag}\" \"${name}\" \"${wryly}\" <args...> ##\"${line}\"##")
                            (output.push "// WATCHMODEDELAY ##\"Delay after ${line}\"##"))))
                (output.push "")
                (output.join "\n"))))

(FileConversionProject.registerConversion
    (new tct.StreamConversion "Label" "fountain" "hollywoo"
        ->stream ?{(stream.dropWhitespace) (stream.startsWith "/*")}
        ->stream
            "LABEL $(.trim
                (.replace
                    (.replace
                        (.replace stream.content "/*" "")
                        "*/" "")
                    "*" ""))\n"))

(function isScreenLine [:String block]
    (when (block.startsWith "SUPER:") (return false))
    (= 1 .length (filter (block.split "\n"))))

(function doWithCharacters [:String thing :String args &opt :Bool containsPlaceholders]
    (FileConversionProject.registerConversion
        (new tct.NamesConversion "${thing} characters" "fountain" "hollywoo"
            ->[block names] (isScreenLine block)
            ->[_ names] (+ (if containsPlaceholders "// " "")
                        (.join (for name names "$(thing.toUpperCase)CHARACTER \"${name}\" $args") "\n")
                        "\n"))))

(doWithCharacters "Add" "<position key> <facing>" true)
(doWithCharacters "Move" "<position key> <facing>" true)
(doWithCharacters "Remove" "")

(FileConversionProject.registerConversion
    (new tct.StreamConversion "Timed super text" "fountain" "hollywoo"
        ->stream (stream.startsWith "SUPER:")
        ->stream {
            (stream.dropString "SUPER:")
            (stream.dropWhitespace)
            (let [text (stream.expect "super text" ->(stream.takeLine))]
                "TIMEDSUPERTEXT ##\"${text}\"## ##\"Delay for supertext '${text}'\"##\n")
        }))

(FileConversionProject.registerConversion
    (new tct.StreamConversion "Timed title card" "fountain" "hollywoo"
        ->stream (stream.startsWith "SUPER:")
        ->stream {
            (stream.dropString "SUPER:")
            (stream.dropWhitespace)
            (let [text (stream.expect "super text" ->(stream.takeLine))]
                "TIMEDTITLECARDV2 ##\"Delay for titlecard '${text}'\"## [##\"${text}\"##]\n")
        }))

(FileConversionProject.registerConversion
    (new tct.StreamConversion "Delay" "fountain" "hollywoo"
        ->stream (isScreenLine stream.content)
        ->stream "DELAY ##\"$(stream.content.trim)\"##\n"
        true))

(function newSceneConversion [engine command setArgs newCamera containsPlaceholders]
    (FileConversionProject.registerConversion
        (new tct.StreamConversion "New scene (hollywoo-${engine})" "fountain" "hollywoo"
            ->stream (stream.startsWithOneOf ["INT." "EXT." "INT./EXT."])
            ->stream {
                (let [fullHeading (stream.content.trim)
                        perspectiveAbbr (stream.expect "perspective" ->(stream.takeUntilAndDrop " "))
                        perspective (case perspectiveAbbr ("INT." "Interior") ("EXT." "Exterior") ("INT./EXT." "Mixed") (never otherwise))
                        location (.trim (stream.expect "location" ->(stream.takeUntilLastAndDrop "-")))
                        setKey "${perspectiveAbbr} ${location}"
                        time {(stream.dropWhitespace) stream.content}
                        timeEnumValue (case (time.trim) ("MORNING" "Morning") ("DAY" "Day") ("EVENING" "Evening") ("NIGHT" "Night") (otherwise (set containsPlaceholders true) "<Morning/Day/Evening/Night>"))
                        start (if containsPlaceholders "**" "")]
"${start}(preload
    (${command} \"${setKey}\" ${setArgs})
    (newSceneFromSet \"${fullHeading}\" \"${setKey}\" ${timeEnumValue} ${perspective} ${newCamera}))
SETSCENE \"${fullHeading}\""
                )
            })))

(FileConversionProject.registerConversion
    (new tct.StreamConversion "Return to scene" "fountain" "hollywoo"
        ->stream (stream.startsWithOneOf ["INT." "EXT." "INT./EXT."])
        ->stream {
            (let [fullHeading (stream.content.trim)]
                "SETSCENE \"${fullHeading}\"")
        }))

(function newPropConversion [engine command propArgs containsPlaceholders]
    (FileConversionProject.registerConversion
        (new tct.StreamConversion "New prop (hollywoo-${engine})" "fountain" "hollywoo"
            ->stream (stream.startsWith "INSERT")
            ->stream {
                (stream.dropString "INSERT")
                (stream.dropUntil "-")
                (stream.dropString "-")
                (stream.dropWhitespace)
                (assertLet [(Some propKey) (stream.takeLine)
                                propKey (propKey.trim)
                                start (if containsPlaceholders "**" "")]
"${start}(preload
    (${command} \"${propKey}\" ${propArgs}))
ADDPROP \"${propKey}\" \"position for ${propKey}\""
                )
            })))