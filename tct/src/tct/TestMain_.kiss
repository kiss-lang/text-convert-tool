(import sys.io.File)
(import sys.FileSystem)

(function rmrf [directory]
    (walkDirectory "" directory ->file (FileSystem.deleteFile file) null ->dir (FileSystem.deleteDirectory dir))
    (FileSystem.deleteDirectory directory))

(function assertExportContents [:FileConversionProject project :String inTextFull :String outTextFull]
    (project.fullSave)
    (assertEquals inTextFull (File.getContent project.inFile))
    (assertEquals outTextFull (File.getContent project.outFile)))

// Test import file in a folder:
(FileConversionProject.importFile "test/test.in" "out" "\n\n" "\n")
(assert (FileSystem.exists "test/test.tct/tct.txt"))
(assertEquals (StringTools.replace (File.getContent "test/test.in") "\r" "") (File.getContent "test/test.tct/test.in"))
(rmrf "test/test.tct")

// Test import file in current directory:
(let [cwd (Sys.getCwd)]
    (Sys.setCwd "${cwd}/test")
    (FileConversionProject.importFile "test.in" "out" "\n\n" "\n")
    (assert (FileSystem.exists "test.tct/tct.txt"))
    
    // Load the imported project and inspect it
    (let [project (FileConversionProject.loadDirectory "test.tct")]
        (assertEquals "here\n\n" .inText (first project.blocks))
        (assertEquals "there" .inText (second project.blocks))
        
        // Test block insertion
        (project.insertBlock 0 "not " "!")
        (project.insertBlock 2 "not " "!")
        (assertExportContents project "not here\n\nnot there" "!!")
        
        // Test block deletion
        (project.deleteBlock 0)
        (assertExportContents project "here\n\nnot there" "!")
        (assertEquals 6 .length (FileSystem.readDirectory "${project.directory}/blocks"))
        
        // Test block editing
        (project.editBlock 2 "here" "!!!" true)
        (assertExportContents project "here\n\nnot here" "!!!!")

        // Test trying to delete locked block
        (assert !(project.deleteBlock 2))
        // Test trying to edit locked block
        (assert !(project.editBlock 2 "edit" "locked block"))
        (project.toggleLock 2)
        (assert (project.deleteBlock 2))
        (assertExportContents project "here\n\nnot " "!")
        
        // Test undo/redo delete
        (project.undoChange)
        (assertExportContents project "here\n\nnot here" "!!!!")
        (project.redoChange)
        (assertExportContents project "here\n\nnot " "!")

        (project.undoChange)
        (project.undoChange)
        
        // Test undo/redo edit:
        (assert (project.undoChange))
        (assertExportContents project "here\n\nnot there" "!")
        (project.redoChange)
        (assertExportContents project "here\n\nnot here" "!!!!")
        )

    (rmrf "test.tct")
    (Sys.setCwd cwd))